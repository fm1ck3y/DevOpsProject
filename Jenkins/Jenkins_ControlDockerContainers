pipeline {
    agent {
        label 'master'
    }
    parameters {
        choice(name: 'selected_type_job', choices: ['Restart', 'Start', 'Stop'], description: 'Typed run job')
    }

    environment {
        PATH_TO_ANSIBLE_CONFIGS = "/opt/FilesForJobs/control_dockers.yml"
        PATH_TO_ANSIBLE_INVENTORY = "/opt/FilesForJobs/inventory.ini"
    }


    stages {
        stage ('Restart dockers') {
            when { expression { return params.selected_type_job == 'Restart' } }
                steps {
                    ansiColor('xterm'){
                        ansiblePlaybook(
                            playbook: "${env.PATH_TO_ANSIBLE_CONFIGS}",
                            inventory: "${env.PATH_TO_ANSIBLE_INVENTORY}",
                            hostKeyChecking: false,
                            extraVars: [type : 'Restart'],
                            colorized: true)
                    }
                }
        }

        stage ('Stop dockers') {
            when { expression { return params.selected_type_job == 'Stop' } }
                steps {
                    ansiColor('xterm'){
                        ansiblePlaybook(
                            playbook: "${env.PATH_TO_ANSIBLE_CONFIGS}",
                            inventory: "${env.PATH_TO_ANSIBLE_INVENTORY}",
                            hostKeyChecking: false,
                            extraVars: [type : 'Stop'],
                            colorized: true)
                    }
                }
        }

        stage ('Start dockers') {
            when { expression { return params.selected_type_job == 'Start' } }
                steps {
                    ansiColor('xterm'){
                        ansiblePlaybook(
                            playbook: "${env.PATH_TO_ANSIBLE_CONFIGS}",
                            inventory: "${env.PATH_TO_ANSIBLE_INVENTORY}",
                            hostKeyChecking: false,
                            extraVars: [type : 'Start'],
                            colorized: true)
                    }
                }
        }
    }
}